---
- hosts: localhost
  connection: local
  tasks:

    - name: Start Management Cluster VM
      include_role:
        name: management-cluster
      when:
        - (not do_not_install_vm | default(False)) | bool
      vars:
        vm_hostname: management-cluster
        vm_instance_name: management_0
        vm_network: "{{ management_cluster_vm_network }}"
        vm_public_network_ip: "{{ management_cluster_public_ip }}"

    - name: Show management-cluster vm IP
      debug:
        msg: "Login to the management-cluster vm with 'ssh {{ vm_user }}@{{ management_cluster_public_ip }}'"

    - name: Create .kube
      file:
        path: ~/.kube
        state: directory

    # TODO - there's likely a better way to do this...
    - name: Fetch kubeconfig from management cluster
      command:
        cmd: "ssh -o StrictHostKeyChecking=no {{ vm_user }}@{{ management_cluster_public_ip }} sudo cat /etc/rancher/rke2/rke2.yaml"
      register: kubeconfig

    - name: Write ~/.kube/config locally
      copy:
        content: "{{ kubeconfig.stdout }}"
        dest: ~/.kube/config

    - name: Update IP in kubeconfig
      replace:
        path: ~/.kube/config
        regexp: '127\.0\.0\.1'
        replace: "{{ management_cluster_public_ip }}"

    - name: Wait for expected deployments to be rolled out
      shell: >
        kubectl rollout status Deployment/{{ item.deployment }} -n {{ item.namespace }} 2>&1 | grep 'successfully rolled out'
      register: rollout_result
      until: rollout_result.rc == 0
      retries: 12
      delay: 10
      with_items:
        - {'deployment': 'capi-controller-manager', 'namespace': 'capi-system'}
        - {'deployment': 'capm3-controller-manager', 'namespace': 'capm3-system'}
        - {'deployment': 'ipam-controller-manager', 'namespace': 'capm3-system'}
        - {'deployment': 'rke2-bootstrap-controller-manager', 'namespace': 'rke2-bootstrap-system'}
        - {'deployment': 'rke2-control-plane-controller-manager', 'namespace': 'rke2-control-plane-system'}
        - {'deployment': 'cert-manager', 'namespace': 'cert-manager'}
        - {'deployment': 'baremetal-operator-controller-manager', 'namespace': 'metal3-system'}
        - {'deployment': 'metal3-metal3-ironic', 'namespace': 'metal3-system'}
        - {'deployment': 'rancher-turtles-cluster-api-operator', 'namespace': 'rancher-turtles-system'}
        - {'deployment': 'rancher-turtles-controller-manager', 'namespace': 'rancher-turtles-system'}
